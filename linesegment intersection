//Time complexity O(n^2)
class ls{
    int x1,y1,x2,y2;
    ls(int x1,int y1,int x2,int y2 ){
        this.x1=x1;
        this.y1=y1;
        this.x2=x2;
        this.y2=y2;
    }
}
class linesweep{
    static int isLeft(ls line,int targetx,int targety){
        return ((line.x2-line.x1)*(targety-line.y1)-(targetx-line.x1)*(line.y2-line.y1));
    }
    public static void main(String[] args){
        int[][] lines={{1,1,3,3},{1,2,7,2},
                        {4,1,4,6},{3,4,6,1}
                         };
        ls[] l=new ls[lines.length];
        for(int i=0;i<lines.length;i++){
                l[i]=new ls(lines[i][0],lines[i][1],lines[i][2],lines[i][3]);
                
        }
        
        for(int i=0;i<lines.length;i++){
            for(int j=i+1;j<lines.length;j++){
                if((isLeft(l[i],l[j].x1,l[j].y1)*isLeft(l[i],l[j].x2,l[j].y2))<0 &&
                    (isLeft(l[j],l[i].x1,l[i].y1)*isLeft(l[j],l[i].x2,l[i].y2))<0){
                        System.out.println("("+l[i].x1+","+l[i].y1+","+l[i].x2+","+l[i].y2);
                        System.out.println(l[j].x1+","+l[j].y1+","+l[j].x2+","+l[j].y2+")");
                    }
            }
            
        }
        
    }
}
